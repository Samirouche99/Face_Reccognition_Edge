    def detect_and_recognize_faces(self):
        self.running = True
        padding = 40  # Adjusted padding for better face crops

        try:
            while self.running:
                ret, frame = self.cap.read()
                if not ret or frame is None:
                    time.sleep(0.1)
                    continue

                small_frame = cv2.resize(frame, (0, 0), fx=0.75, fy=0.75)
                rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
                face_locations = face_recognition.face_locations(rgb_small_frame, model='cnn')
                face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

                current_time = time.time()
                height, width = frame.shape[:2]

                for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
                    scale = 1 / 0.75
                    top, right, bottom, left = [int(coord * scale) for coord in (top, right, bottom, left)]

                    # Apply padding safely
                    top_pad = max(0, top - padding)
                    right_pad = min(width, right + padding)
                    bottom_pad = min(height, bottom + padding)
                    left_pad = max(0, left - padding)

                    name, category = "Unknown", "Unknown"
                    matches = face_recognition.compare_faces(self.known_faces, face_encoding, tolerance=0.45)

                    if True in matches:
                        idx = matches.index(True)
                        category, name = self.known_names[idx]

                        last_log_time = self.last_known_log_times.get(name, 0)